@inherits LayoutComponentBase
@using PrintersFrontend.Services
@inject NavigationManager navigationManager
@inject AuthService authService

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            @if (_role == "Guest")
            {
                <NavLink class="nav-link" href="registration">
                    Регистрация
                </NavLink>
                <NavLink class="nav-link" href="authentication">
                    Войти
                </NavLink>
                @*<a @onclick="ToRegistration">Регистрация</a>
            <a @onclick="ToLogin">Войти</a>*@
            }
            else
            {
                @_userName
                <a @onclick="LogOut">Выйти</a>
            }

        </div>

        <div class="content px-4">
            @if (_hasAccess)
            {
                @Body
            }
            else
            {
                <Unavailable />
            }
        </div>
    </div>
</div>

@code {
    private bool _hasAccess;
    private string _userName;
    private string _role;

    protected override async Task OnInitializedAsync()
    {
        await Auth();
    }

    protected override async Task OnParametersSetAsync()
    {
        await Auth();
    }

    private async Task LogOut()
    {
        await authService.LogOut();
        _userName = string.Empty;
        _role = "Guest";
        _hasAccess = false;
    }

    private async Task ToRegistration()
    {
        navigationManager.NavigateTo("https://localhost:44382/registration");
        this.StateHasChanged();
        Console.WriteLine(_hasAccess);
    }

    private async Task ToLogin()
    {
        navigationManager.NavigateTo("https://localhost:44382/authentication");
        this.StateHasChanged();
        Console.WriteLine(_hasAccess);
    }

    private async Task Auth()
    {
        _hasAccess = false;
        _userName = await authService.GetNameAsync();
        _role = await authService.GetRoleAsync();
        string path = new Uri(navigationManager.Uri).AbsolutePath.ToLower();
        Console.WriteLine(path);
        var guestUris = new string[] { "/authentication", "/registration" };
        var userRestrictedUris = new string[] { "/admin" };

        if (_role == "Admin")
        {
            _hasAccess = true;
        }
        foreach (string a in guestUris)
        {
            if (path == a)
            {
                _hasAccess = true;
            }
        }
        if (_role == "User")
        {
            _hasAccess = true;
            foreach (string a in userRestrictedUris)
            {
                if (path.Contains(a))
                {
                    _hasAccess = false;
                }
            }
        }
    }
}

