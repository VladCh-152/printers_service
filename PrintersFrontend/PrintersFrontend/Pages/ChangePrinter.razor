@page "/printer/{Id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using PrintersFrontend.Models
@using PrintersFrontend.Services
@inject PrinterService _printerService
@inject HttpClient Http
@inject NavigationManager navigationManager

@if (changePrinter == null)
{
    <Loading />
}
else
{
    <EditForm Model="@changePrinter" OnValidSubmit="@EditPrinter">
        <DataAnnotationsValidator />

        <h6>Model</h6>
        @if (models != null)
        {
            <InputSelect class="InStyle" id="PrinterModel" @bind-Value="changePrinter.ModelId">
                @foreach (var model in models)
                        {
                    <option value="@model.Id">@model.Name</option>
                        }
            </InputSelect>
            <ValidationMessage For="@(() => changePrinter.ModelId)" />
        }

        <h6>Inventory number</h6>
        <InputText class="InStyle" id="InventoryNum" @bind-Value="changePrinter.InventoryNum" placeholder="Серийный номер" />
        <ValidationMessage For="@(() => changePrinter.InventoryNum)" />
        <br />
        <br />
        @if (IsNew)
        {
            <Button Type="submit" Name="Добавить" Width="250" />
            <Button Type="button" Name="Назад" Width="250" OnClick="Back"></Button>
        }
        else
        {
            <Button Type="button" Name="Удалить принтер" Width="250" OnClick="RemovePrinter"></Button>
            <Button Type="submit" Name="Редактировать" Width="250" />
            <Button Type="button" Name="Назад" Width="250" OnClick="Back"></Button>
        }
    </EditForm>
}

@code
{
    [Parameter]
    public int Id { get; set; }
    bool IsNew = false;

    private Printer changePrinter;
    private List<PrinterModel> models;

    protected override async Task OnInitializedAsync()
    {
        IsNew = false;
        if (Id == 0)
        {
            IsNew = true;
            changePrinter = new Printer();
        }
        else
        {
            changePrinter = await Http.GetFromJsonAsync<Printer>("https://localhost:44337/api/printers/" + Id.ToString());

            if (changePrinter.Id == 0)
            {
                Id = 0;
                IsNew = true;
            }
        }
        models = await Http.GetFromJsonAsync<List<PrinterModel>>("https://localhost:44337/api/printermodels");
    }

    private async Task EditPrinter()
    {
        if (IsNew)
        {
            await Http.PostAsJsonAsync("https://localhost:44337/api/printers", changePrinter);
        }
        else
        {
            await Http.PutAsJsonAsync($"https://localhost:44337/api/printers", changePrinter);
        }
    }

    private void Back()
    {
        navigationManager.NavigateTo("https://localhost:44382/printers");
    }

    private async Task RemovePrinter()
    {
        await Http.DeleteAsync($"https://localhost:44337/api/printers/{changePrinter.Id}");
        changePrinter = new Printer();
    }
}
