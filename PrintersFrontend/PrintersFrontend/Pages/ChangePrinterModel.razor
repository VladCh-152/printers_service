@page "/model/{Id:int}"
@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using PrintersFrontend.Models
@inject HttpClient Http
@inject NavigationManager navigationManager

@if (changeModel == null)
{
    <Loading />
}
else
{
<EditForm Model="@changeModel" OnValidSubmit="@EditModel">
    <DataAnnotationsValidator />

    <h6>Vendor</h6>
    @if (vendors != null)
    {
        <InputSelect class="InStyle" id="Vendor" @bind-Value="changeModel.VendorId">
            @foreach (var vendor in vendors)
                    {
                <option value="@vendor.Id">@vendor.Name</option>
                    }
        </InputSelect>
        <ValidationMessage For="@(() => changeModel.VendorId)" />
    }

    <h6>Type</h6>
    @if (types != null)
    {
        <InputSelect class="InStyle" id="Type" @bind-Value="changeModel.TypeId">
            @foreach (var type in types)
                    {
                <option value="@type.Id">@type.Name</option>
                    }
        </InputSelect>
        <ValidationMessage For="@(() => changeModel.TypeId)" />
    }
    <br />
    <br />
    @if (IsNew)
    {
        <Button Type="submit" Name="Добавить" Width="250" />
        <Button Type="button" Name="Назад" Width="250" OnClick="Back"></Button>
    }
    else
    {
        <Button Type="button" Name="Удалить модель" Width="250" OnClick="RemoveModel"></Button>
        <Button Type="submit" Name="Редактировать" Width="250" />
        <Button Type="button" Name="Назад" Width="250" OnClick="Back"></Button>
    }
</EditForm>
}

@code
{
    [Parameter]
    public int Id { get; set; }
    bool IsNew = false;

    private EditContext editContext;
    private PrinterModel changeModel;
    private List<Vendor> vendors;
    private List<PrinterType> types;

    protected override async Task OnInitializedAsync()
    {
        IsNew = false;
        if (Id == 0)
        {
            IsNew = true;
            changeModel = new PrinterModel();
        }
        else
        {
            changeModel = await Http.GetFromJsonAsync<PrinterModel>("https://localhost:44337/api/printermodels/" + Id.ToString());

            if (changeModel.Id == 0)
            {
                Id = 0;
                IsNew = true;
            }
        }
        vendors = await Http.GetFromJsonAsync<List<Vendor>>("https://localhost:44337/api/vendors");
        types = await Http.GetFromJsonAsync<List<PrinterType>>("https://localhost:44337/api/printertypes");
    }

    private async Task EditModel()
    {
        if (IsNew)
        {
            await Http.PostAsJsonAsync("https://localhost:44337/api/printermodels", changeModel);
        }
        else
        {
            await Http.PutAsJsonAsync($"https://localhost:44337/api/printermodels", changeModel);
        }
    }

    private void Back()
    {
        navigationManager.NavigateTo("https://localhost:44382/models");
    }

    private async Task RemoveModel()
    {
        await Http.DeleteAsync($"https://localhost:44337/api/printermodels/{changeModel.Id}");
        changeModel = new PrinterModel();
    }
}
